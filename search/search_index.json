{"config":{"indexing":"full","lang":["en"],"min_search_length":3,"prebuild_index":false,"separator":"[\\s\\-]+"},"docs":[{"location":"","text":"Introduction Technical setup Install Visual Studio Code from here Install folowing extensions in Visual Studio Code: Github Repositories (GitHub, Inc.) GitHub Copilot (GitHub Copilot) GitHub Actions (GitHub, Inc.) Python (Microsoft) Useful links Python Miniconda Documentation Google Colab How to use this repository Below are the steps you need to follow: Create a GitHub account if you don\u2019t have one. Fork this repository to your account. Enable the Issues tab: Go to the Settings tab and check the Issues option. Add your professor as a collaborator: Go to the Settings tab and add their GitHub username in the Collaborators section. Install python: Download Source Code & WWW GitHub repo WWW Where can I find the problems? Please visit the Mathematics Physics Lectures website. Physics Mathematics Discret Mathematics","title":"Introduction"},{"location":"#introduction","text":"","title":"Introduction"},{"location":"#technical-setup","text":"Install Visual Studio Code from here Install folowing extensions in Visual Studio Code: Github Repositories (GitHub, Inc.) GitHub Copilot (GitHub Copilot) GitHub Actions (GitHub, Inc.) Python (Microsoft)","title":"Technical setup"},{"location":"#useful-links","text":"Python Miniconda Documentation Google Colab","title":"Useful links"},{"location":"#how-to-use-this-repository","text":"Below are the steps you need to follow: Create a GitHub account if you don\u2019t have one. Fork this repository to your account. Enable the Issues tab: Go to the Settings tab and check the Issues option. Add your professor as a collaborator: Go to the Settings tab and add their GitHub username in the Collaborators section. Install python: Download Source Code & WWW GitHub repo WWW","title":"How to use this repository"},{"location":"#where-can-i-find-the-problems","text":"Please visit the Mathematics Physics Lectures website. Physics Mathematics Discret Mathematics","title":"Where can I find the problems?"},{"location":"1%20Physics/1%20Mechanics/Problem_1/","text":"Problem 1 1. Theoretical Foundation Investigating the Range as a Function of the Angle of Projection 1. Theoretical Foundation Projectile motion is governed by Newton\u2019s laws of motion under constant gravitational acceleration. Let\u2019s derive the equations step-by-step. Governing Equations Assume a projectile is launched with initial velocity \\( v_0 \\) at an angle \\( \\theta \\) from the horizontal, with no air resistance and constant gravitational acceleration \\( g \\) . The initial conditions are: - Horizontal velocity: \\( v_{x0} = v_0 \\cos\\theta \\) - Vertical velocity: \\( v_{y0} = v_0 \\sin\\theta \\) The acceleration is: - \\( a_x = 0 \\) (no horizontal acceleration) - \\( a_y = -g \\) (downward gravitational acceleration) The position as a function of time \\( t \\) is found by integrating the accelerations: - Horizontal: \\( x(t) = v_{x0} t = v_0 \\cos\\theta \\, t \\) - Vertical: \\( y(t) = v_{y0} t - \\frac{1}{2} g t^2 = v_0 \\sin\\theta \\, t - \\frac{1}{2} g t^2 \\) Time of Flight The projectile hits the ground when \\( y(t) = 0 \\) (assuming launch height is zero): $$ v_0 \\sin\\theta \\, t - \\frac{1}{2} g t^2 = 0 $$ Factorizing: $$ t (v_0 \\sin\\theta - \\frac{1}{2} g t) = 0 $$ Solutions: \\( t = 0 \\) (start) or \\( t = \\frac{2 v_0 \\sin\\theta}{g} \\) (time of flight). Range The horizontal range \\( R \\) is the distance traveled when \\( t = \\frac{2 v_0 \\sin\\theta}{g} \\) : $$ R = v_0 \\cos\\theta \\cdot \\frac{2 v_0 \\sin\\theta}{g} = \\frac{2 v_0^2 \\sin\\theta \\cos\\theta}{g} $$ Using the identity \\( \\sin 2\\theta = 2 \\sin\\theta \\cos\\theta \\) : $$ R = \\frac{v_0^2 \\sin 2\\theta}{g} $$ This is the general form of the range, showing dependence on \\( \\theta \\) , \\( v_0 \\) , and \\( g \\) . Family of Solutions The equation \\( R = \\frac{v_0^2 \\sin 2\\theta}{g} \\) represents a family of solutions parameterized by \\( v_0 \\) and \\( g \\) . Different initial conditions yield distinct ranges and trajectories. 2. Analysis of the Range The range depends on \\( \\sin 2\\theta \\) , which has a maximum value of 1 when \\( 2\\theta = 90^\\circ \\) , or \\( \\theta = 45^\\circ \\) . Thus, the maximum range is: $$ R_{\\text{max}} = \\frac{v_0^2}{g} \\quad \\text{at} \\quad \\theta = 45^\\circ $$ Initial Velocity ( \\( v_0 \\) ) : Range scales with \\( v_0^2 \\) , so doubling \\( v_0 \\) quadruples \\( R \\) . Gravitational Acceleration ( \\( g \\) ) : Range is inversely proportional to \\( g \\) . On the Moon ( \\( g \\approx 1.62 \\, \\text{m/s}^2 \\) ), the range is greater than on Earth ( \\( g = 9.81 \\, \\text{m/s}^2 \\) ). Angle ( \\( \\theta \\) ) : \\( R \\) is symmetric about \\( 45^\\circ \\) (e.g., \\( \\theta = 30^\\circ \\) and \\( 60^\\circ \\) yield the same range). 3. Practical Applications Sports : A soccer ball\u2019s trajectory depends on kick angle and speed, optimized near \\( 45^\\circ \\) for distance. Engineering : Artillery and rocket launches adjust \\( \\theta \\) and \\( v_0 \\) for target range. Astrophysics : Trajectories on other planets (e.g., Mars, \\( g = 3.72 \\, \\text{m/s}^2 \\) ) require adjusted models. Uneven Terrain : Non-zero launch height modifies the time of flight and range (requires quadratic solving). Air Resistance : Introduces damping, reducing range and altering optimal \\( \\theta \\) . 4. Implementation Below is a Python script simulating projectile motion, plotting range vs. angle, and animating a trajectory. Python Code import numpy as np import matplotlib.pyplot as plt from matplotlib.animation import FuncAnimation from IPython.display import HTML # Constants g = 9.81 # m/s^2 (Earth gravity) v0_values = [10, 15, 20] # Initial velocities (m/s) # Range function def range_theta(theta, v0, g): return (v0**2 * np.sin(2 * np.radians(theta))) / g # Trajectory function def trajectory(t, v0, theta, g): x = v0 * np.cos(np.radians(theta)) * t y = v0 * np.sin(np.radians(theta)) * t - 0.5 * g * t**2 return x, y # Part 1: Range vs Angle Plot theta = np.linspace(0, 90, 91) # Angles from 0 to 90 degrees plt.figure(figsize=(10, 6)) for v0 in v0_values: R = range_theta(theta, v0, g) plt.plot(theta, R, label=f'v0 = {v0} m/s') plt.xlabel('Angle of Projection (degrees)') plt.ylabel('Range (m)') plt.title('Range vs. Angle of Projection') plt.legend() plt.grid(True) plt.show() ![alt text](image-3.png) # Part 2: Animation of Trajectory (for v0 = 15 m/s, theta = 45\u00b0) v0_anim = 15 theta_anim = 45 t_flight = 2 * v0_anim * np.sin(np.radians(theta_anim)) / g t = np.linspace(0, t_flight, 100) x, y = trajectory(t, v0_anim, theta_anim, g) fig, ax = plt.subplots(figsize=(10, 6)) ax.set_xlim(0, max(x) * 1.1) ax.set_ylim(0, max(y) * 1.1) ax.set_xlabel('Distance (m)') ax.set_ylabel('Height (m)') ax.set_title(f'Projectile Trajectory (v0 = {v0_anim} m/s, \u03b8 = {theta_anim}\u00b0)') ax.grid(True) line, = ax.plot([], [], 'b-', lw=2) point, = ax.plot([], [], 'ro') def init(): line.set_data([], []) point.set_data([], []) return line, point def animate(i): line.set_data(x[:i], y[:i]) point.set_data([x[i]], [y[i]]) return line, point anim = FuncAnimation(fig, animate, init_func=init, frames=len(t), interval=50, blit=True) plt.close() # Prevents duplicate static plot HTML(anim.to_jshtml()) # Displays animation in Jupyter; save as GIF in VS Code if needed Instructions for Visual Studio Code Install dependencies: pip install numpy matplotlib IPython . Replace the last line ( HTML(anim.to_jshtml()) ) with anim.save('projectile.gif', writer='pillow', fps=20) to save the animation as a GIF. Run the script to generate the range plot and animation. Graphical Outputs Range vs. Angle : The plot shows \\( R \\) vs. \\( \\theta \\) for \\( v_0 = 10, 15, 20 \\, \\text{m/s} \\) , peaking at \\( 45^\\circ \\) . Animation : A trajectory for \\( v_0 = 15 \\, \\text{m/s} \\) , \\( \\theta = 45^\\circ \\) , showing the parabolic path. Discussion of Limitations Idealized Model : Assumes no air resistance, flat terrain, and constant \\( g \\) . Realistic Factors : Drag : Reduces range; optimal \\( \\theta \\) shifts below \\( 45^\\circ \\) . Wind : Alters trajectory unpredictably. Height : Non-zero launch height requires solving a quadratic for time of flight. Suggestions : Use numerical methods (e.g., Runge-Kutta) to include drag ( \\( F_d = -k v^2 \\) ) or wind forces. Conclusion This analysis reveals the elegance of projectile motion\u2019s dependence on \\( \\theta \\) , \\( v_0 \\) , and \\( g \\) , while highlighting its adaptability to real-world scenarios. The computational tools provide visual insights, making it a powerful teaching and engineering tool. Notes for Presentation Show the range plot to explain the \\( 45^\\circ \\) maximum. Play the animation (or show the GIF) to visualize motion. Discuss how tweaking \\( v_0 \\) or \\( g \\) changes outcomes, linking to sports or space exploration. Let me know if you need adjustments or additional features!","title":"Problem 1"},{"location":"1%20Physics/1%20Mechanics/Problem_1/#problem-1","text":"","title":"Problem 1"},{"location":"1%20Physics/1%20Mechanics/Problem_1/#1-theoretical-foundation","text":"","title":"1. Theoretical Foundation"},{"location":"1%20Physics/1%20Mechanics/Problem_1/#investigating-the-range-as-a-function-of-the-angle-of-projection","text":"","title":"Investigating the Range as a Function of the Angle of Projection"},{"location":"1%20Physics/1%20Mechanics/Problem_1/#1-theoretical-foundation_1","text":"Projectile motion is governed by Newton\u2019s laws of motion under constant gravitational acceleration. Let\u2019s derive the equations step-by-step.","title":"1. Theoretical Foundation"},{"location":"1%20Physics/1%20Mechanics/Problem_1/#governing-equations","text":"Assume a projectile is launched with initial velocity \\( v_0 \\) at an angle \\( \\theta \\) from the horizontal, with no air resistance and constant gravitational acceleration \\( g \\) . The initial conditions are: - Horizontal velocity: \\( v_{x0} = v_0 \\cos\\theta \\) - Vertical velocity: \\( v_{y0} = v_0 \\sin\\theta \\) The acceleration is: - \\( a_x = 0 \\) (no horizontal acceleration) - \\( a_y = -g \\) (downward gravitational acceleration) The position as a function of time \\( t \\) is found by integrating the accelerations: - Horizontal: \\( x(t) = v_{x0} t = v_0 \\cos\\theta \\, t \\) - Vertical: \\( y(t) = v_{y0} t - \\frac{1}{2} g t^2 = v_0 \\sin\\theta \\, t - \\frac{1}{2} g t^2 \\)","title":"Governing Equations"},{"location":"1%20Physics/1%20Mechanics/Problem_1/#time-of-flight","text":"The projectile hits the ground when \\( y(t) = 0 \\) (assuming launch height is zero): $$ v_0 \\sin\\theta \\, t - \\frac{1}{2} g t^2 = 0 $$ Factorizing: $$ t (v_0 \\sin\\theta - \\frac{1}{2} g t) = 0 $$ Solutions: \\( t = 0 \\) (start) or \\( t = \\frac{2 v_0 \\sin\\theta}{g} \\) (time of flight).","title":"Time of Flight"},{"location":"1%20Physics/1%20Mechanics/Problem_1/#range","text":"The horizontal range \\( R \\) is the distance traveled when \\( t = \\frac{2 v_0 \\sin\\theta}{g} \\) : $$ R = v_0 \\cos\\theta \\cdot \\frac{2 v_0 \\sin\\theta}{g} = \\frac{2 v_0^2 \\sin\\theta \\cos\\theta}{g} $$ Using the identity \\( \\sin 2\\theta = 2 \\sin\\theta \\cos\\theta \\) : $$ R = \\frac{v_0^2 \\sin 2\\theta}{g} $$ This is the general form of the range, showing dependence on \\( \\theta \\) , \\( v_0 \\) , and \\( g \\) .","title":"Range"},{"location":"1%20Physics/1%20Mechanics/Problem_1/#family-of-solutions","text":"The equation \\( R = \\frac{v_0^2 \\sin 2\\theta}{g} \\) represents a family of solutions parameterized by \\( v_0 \\) and \\( g \\) . Different initial conditions yield distinct ranges and trajectories.","title":"Family of Solutions"},{"location":"1%20Physics/1%20Mechanics/Problem_1/#2-analysis-of-the-range","text":"The range depends on \\( \\sin 2\\theta \\) , which has a maximum value of 1 when \\( 2\\theta = 90^\\circ \\) , or \\( \\theta = 45^\\circ \\) . Thus, the maximum range is: $$ R_{\\text{max}} = \\frac{v_0^2}{g} \\quad \\text{at} \\quad \\theta = 45^\\circ $$ Initial Velocity ( \\( v_0 \\) ) : Range scales with \\( v_0^2 \\) , so doubling \\( v_0 \\) quadruples \\( R \\) . Gravitational Acceleration ( \\( g \\) ) : Range is inversely proportional to \\( g \\) . On the Moon ( \\( g \\approx 1.62 \\, \\text{m/s}^2 \\) ), the range is greater than on Earth ( \\( g = 9.81 \\, \\text{m/s}^2 \\) ). Angle ( \\( \\theta \\) ) : \\( R \\) is symmetric about \\( 45^\\circ \\) (e.g., \\( \\theta = 30^\\circ \\) and \\( 60^\\circ \\) yield the same range).","title":"2. Analysis of the Range"},{"location":"1%20Physics/1%20Mechanics/Problem_1/#3-practical-applications","text":"Sports : A soccer ball\u2019s trajectory depends on kick angle and speed, optimized near \\( 45^\\circ \\) for distance. Engineering : Artillery and rocket launches adjust \\( \\theta \\) and \\( v_0 \\) for target range. Astrophysics : Trajectories on other planets (e.g., Mars, \\( g = 3.72 \\, \\text{m/s}^2 \\) ) require adjusted models. Uneven Terrain : Non-zero launch height modifies the time of flight and range (requires quadratic solving). Air Resistance : Introduces damping, reducing range and altering optimal \\( \\theta \\) .","title":"3. Practical Applications"},{"location":"1%20Physics/1%20Mechanics/Problem_1/#4-implementation","text":"Below is a Python script simulating projectile motion, plotting range vs. angle, and animating a trajectory.","title":"4. Implementation"},{"location":"1%20Physics/1%20Mechanics/Problem_1/#python-code","text":"import numpy as np import matplotlib.pyplot as plt from matplotlib.animation import FuncAnimation from IPython.display import HTML # Constants g = 9.81 # m/s^2 (Earth gravity) v0_values = [10, 15, 20] # Initial velocities (m/s) # Range function def range_theta(theta, v0, g): return (v0**2 * np.sin(2 * np.radians(theta))) / g # Trajectory function def trajectory(t, v0, theta, g): x = v0 * np.cos(np.radians(theta)) * t y = v0 * np.sin(np.radians(theta)) * t - 0.5 * g * t**2 return x, y # Part 1: Range vs Angle Plot theta = np.linspace(0, 90, 91) # Angles from 0 to 90 degrees plt.figure(figsize=(10, 6)) for v0 in v0_values: R = range_theta(theta, v0, g) plt.plot(theta, R, label=f'v0 = {v0} m/s') plt.xlabel('Angle of Projection (degrees)') plt.ylabel('Range (m)') plt.title('Range vs. Angle of Projection') plt.legend() plt.grid(True) plt.show() ![alt text](image-3.png) # Part 2: Animation of Trajectory (for v0 = 15 m/s, theta = 45\u00b0) v0_anim = 15 theta_anim = 45 t_flight = 2 * v0_anim * np.sin(np.radians(theta_anim)) / g t = np.linspace(0, t_flight, 100) x, y = trajectory(t, v0_anim, theta_anim, g) fig, ax = plt.subplots(figsize=(10, 6)) ax.set_xlim(0, max(x) * 1.1) ax.set_ylim(0, max(y) * 1.1) ax.set_xlabel('Distance (m)') ax.set_ylabel('Height (m)') ax.set_title(f'Projectile Trajectory (v0 = {v0_anim} m/s, \u03b8 = {theta_anim}\u00b0)') ax.grid(True) line, = ax.plot([], [], 'b-', lw=2) point, = ax.plot([], [], 'ro') def init(): line.set_data([], []) point.set_data([], []) return line, point def animate(i): line.set_data(x[:i], y[:i]) point.set_data([x[i]], [y[i]]) return line, point anim = FuncAnimation(fig, animate, init_func=init, frames=len(t), interval=50, blit=True) plt.close() # Prevents duplicate static plot HTML(anim.to_jshtml()) # Displays animation in Jupyter; save as GIF in VS Code if needed","title":"Python Code"},{"location":"1%20Physics/1%20Mechanics/Problem_1/#instructions-for-visual-studio-code","text":"Install dependencies: pip install numpy matplotlib IPython . Replace the last line ( HTML(anim.to_jshtml()) ) with anim.save('projectile.gif', writer='pillow', fps=20) to save the animation as a GIF. Run the script to generate the range plot and animation.","title":"Instructions for Visual Studio Code"},{"location":"1%20Physics/1%20Mechanics/Problem_1/#graphical-outputs","text":"Range vs. Angle : The plot shows \\( R \\) vs. \\( \\theta \\) for \\( v_0 = 10, 15, 20 \\, \\text{m/s} \\) , peaking at \\( 45^\\circ \\) . Animation : A trajectory for \\( v_0 = 15 \\, \\text{m/s} \\) , \\( \\theta = 45^\\circ \\) , showing the parabolic path.","title":"Graphical Outputs"},{"location":"1%20Physics/1%20Mechanics/Problem_1/#discussion-of-limitations","text":"Idealized Model : Assumes no air resistance, flat terrain, and constant \\( g \\) . Realistic Factors : Drag : Reduces range; optimal \\( \\theta \\) shifts below \\( 45^\\circ \\) . Wind : Alters trajectory unpredictably. Height : Non-zero launch height requires solving a quadratic for time of flight. Suggestions : Use numerical methods (e.g., Runge-Kutta) to include drag ( \\( F_d = -k v^2 \\) ) or wind forces.","title":"Discussion of Limitations"},{"location":"1%20Physics/1%20Mechanics/Problem_1/#conclusion","text":"This analysis reveals the elegance of projectile motion\u2019s dependence on \\( \\theta \\) , \\( v_0 \\) , and \\( g \\) , while highlighting its adaptability to real-world scenarios. The computational tools provide visual insights, making it a powerful teaching and engineering tool.","title":"Conclusion"},{"location":"1%20Physics/1%20Mechanics/Problem_1/#notes-for-presentation","text":"Show the range plot to explain the \\( 45^\\circ \\) maximum. Play the animation (or show the GIF) to visualize motion. Discuss how tweaking \\( v_0 \\) or \\( g \\) changes outcomes, linking to sports or space exploration. Let me know if you need adjustments or additional features!","title":"Notes for Presentation"},{"location":"1%20Physics/1%20Mechanics/Problem_2/","text":"Problem 2 Investigating the Dynamics of a Forced Damped Pendulum 1. Theoretical Foundation The equation of motion for a forced damped pendulum is: $ \\frac{d^2\\theta}{dt^2} + b \\frac{d\\theta}{dt} + \\frac{g}{L} \\sin\\theta = A \\cos(\\omega t) $ where: - \\( \\theta \\) is the angular displacement, - \\( b \\) is the damping coefficient, - \\( g \\) is gravitational acceleration, - \\( L \\) is the length of the pendulum, - \\( A \\) is the amplitude of the external force, - \\( \\omega \\) is the driving frequency. 1.1 Small-Angle Approximation For small angles ($ \\theta \\approx 0 $), we can approximate $ \\sin\\theta \\approx \\theta $, reducing the equation to: $ \\frac{d^2\\theta}{dt^2} + b \\frac{d\\theta}{dt} + \\frac{g}{L} \\theta = A \\cos(\\omega t) $ which is a driven damped harmonic oscillator , allowing for analytical solutions in simple cases. 1.2 Resonance Condition Resonance occurs when the external forcing frequency \\( \\omega \\) matches the system's natural frequency : $ \\omega_0 = \\sqrt{\\frac{g}{L}} $ At resonance, the pendulum exhibits maximum oscillations, which can lead to instability if damping is low. 2. Analysis of Dynamics 2.1 Effects of Parameters Damping coefficient $ b $ : Higher damping suppresses oscillations, preventing chaotic motion. Driving amplitude $ A $ : Larger values can lead to more complex behavior. Driving frequency $ \\omega $ : Controls resonance effects and synchronization. 2.2 Transition to Chaos At low damping, the system can exhibit period-doubling bifurcations , leading to chaos. Phase portraits and Poincar\u00e9 sections help visualize this transition. 3. Practical Applications Mechanical Systems : Bridges, suspension cables, and earthquake-resistant structures. Electrical Circuits : Analogous to driven RLC circuits . Biomechanics : Human balance and walking dynamics. 4. Implementation: Python Simulation We use Runge-Kutta numerical methods to integrate the equation of motion and plot various behaviors. 4.1 Python Code for Visual Studio Code import numpy as np import matplotlib.pyplot as plt from scipy.integrate import solve_ivp # Parameters g = 9.81 # Gravity (m/s^2) L = 1.0 # Pendulum length (m) b = 0.2 # Damping coefficient A = 1.2 # Driving amplitude omega = 2.0 # Driving frequency # Differential equation def forced_damped_pendulum(t, y): theta, omega_t = y dtheta_dt = omega_t domega_dt = - (g / L) * np.sin(theta) - b * omega_t + A * np.cos(omega * t) return [dtheta_dt, domega_dt] # Initial conditions t_span = (0, 50) # Time range t_eval = np.linspace(*t_span, 1000) # Time points y0 = [0.5, 0] # Initial angle and angular velocity # Solve using Runge-Kutta sol = solve_ivp(forced_damped_pendulum, t_span, y0, t_eval=t_eval, method='RK45') # Extract solutions t = sol.t theta = sol.y[0] # Plot results plt.figure(figsize=(8, 5)) plt.plot(t, theta, label='Angular Displacement (theta)') plt.xlabel('Time (s)') plt.ylabel('Theta (radians)') plt.title('Forced Damped Pendulum Motion') plt.legend() plt.grid(True) plt.savefig(\"forced_damped_pendulum.png\", dpi=300) plt.show()","title":"Problem 2"},{"location":"1%20Physics/1%20Mechanics/Problem_2/#problem-2","text":"","title":"Problem 2"},{"location":"1%20Physics/1%20Mechanics/Problem_2/#investigating-the-dynamics-of-a-forced-damped-pendulum","text":"","title":"Investigating the Dynamics of a Forced Damped Pendulum"},{"location":"1%20Physics/1%20Mechanics/Problem_2/#1-theoretical-foundation","text":"The equation of motion for a forced damped pendulum is: $ \\frac{d^2\\theta}{dt^2} + b \\frac{d\\theta}{dt} + \\frac{g}{L} \\sin\\theta = A \\cos(\\omega t) $ where: - \\( \\theta \\) is the angular displacement, - \\( b \\) is the damping coefficient, - \\( g \\) is gravitational acceleration, - \\( L \\) is the length of the pendulum, - \\( A \\) is the amplitude of the external force, - \\( \\omega \\) is the driving frequency.","title":"1. Theoretical Foundation"},{"location":"1%20Physics/1%20Mechanics/Problem_2/#11-small-angle-approximation","text":"For small angles ($ \\theta \\approx 0 $), we can approximate $ \\sin\\theta \\approx \\theta $, reducing the equation to: $ \\frac{d^2\\theta}{dt^2} + b \\frac{d\\theta}{dt} + \\frac{g}{L} \\theta = A \\cos(\\omega t) $ which is a driven damped harmonic oscillator , allowing for analytical solutions in simple cases.","title":"1.1 Small-Angle Approximation"},{"location":"1%20Physics/1%20Mechanics/Problem_2/#12-resonance-condition","text":"Resonance occurs when the external forcing frequency \\( \\omega \\) matches the system's natural frequency : $ \\omega_0 = \\sqrt{\\frac{g}{L}} $ At resonance, the pendulum exhibits maximum oscillations, which can lead to instability if damping is low.","title":"1.2 Resonance Condition"},{"location":"1%20Physics/1%20Mechanics/Problem_2/#2-analysis-of-dynamics","text":"","title":"2. Analysis of Dynamics"},{"location":"1%20Physics/1%20Mechanics/Problem_2/#21-effects-of-parameters","text":"Damping coefficient $ b $ : Higher damping suppresses oscillations, preventing chaotic motion. Driving amplitude $ A $ : Larger values can lead to more complex behavior. Driving frequency $ \\omega $ : Controls resonance effects and synchronization.","title":"2.1 Effects of Parameters"},{"location":"1%20Physics/1%20Mechanics/Problem_2/#22-transition-to-chaos","text":"At low damping, the system can exhibit period-doubling bifurcations , leading to chaos. Phase portraits and Poincar\u00e9 sections help visualize this transition.","title":"2.2 Transition to Chaos"},{"location":"1%20Physics/1%20Mechanics/Problem_2/#3-practical-applications","text":"Mechanical Systems : Bridges, suspension cables, and earthquake-resistant structures. Electrical Circuits : Analogous to driven RLC circuits . Biomechanics : Human balance and walking dynamics.","title":"3. Practical Applications"},{"location":"1%20Physics/1%20Mechanics/Problem_2/#4-implementation-python-simulation","text":"We use Runge-Kutta numerical methods to integrate the equation of motion and plot various behaviors.","title":"4. Implementation: Python Simulation"},{"location":"1%20Physics/1%20Mechanics/Problem_2/#41-python-code-for-visual-studio-code","text":"import numpy as np import matplotlib.pyplot as plt from scipy.integrate import solve_ivp # Parameters g = 9.81 # Gravity (m/s^2) L = 1.0 # Pendulum length (m) b = 0.2 # Damping coefficient A = 1.2 # Driving amplitude omega = 2.0 # Driving frequency # Differential equation def forced_damped_pendulum(t, y): theta, omega_t = y dtheta_dt = omega_t domega_dt = - (g / L) * np.sin(theta) - b * omega_t + A * np.cos(omega * t) return [dtheta_dt, domega_dt] # Initial conditions t_span = (0, 50) # Time range t_eval = np.linspace(*t_span, 1000) # Time points y0 = [0.5, 0] # Initial angle and angular velocity # Solve using Runge-Kutta sol = solve_ivp(forced_damped_pendulum, t_span, y0, t_eval=t_eval, method='RK45') # Extract solutions t = sol.t theta = sol.y[0] # Plot results plt.figure(figsize=(8, 5)) plt.plot(t, theta, label='Angular Displacement (theta)') plt.xlabel('Time (s)') plt.ylabel('Theta (radians)') plt.title('Forced Damped Pendulum Motion') plt.legend() plt.grid(True) plt.savefig(\"forced_damped_pendulum.png\", dpi=300) plt.show()","title":"4.1 Python Code for Visual Studio Code"},{"location":"1%20Physics/2%20Gravity/Problem_1/","text":"Problem 1","title":"Problem 1"},{"location":"1%20Physics/2%20Gravity/Problem_1/#problem-1","text":"","title":"Problem 1"},{"location":"1%20Physics/2%20Gravity/Problem_2/","text":"Problem 2","title":"Problem 2"},{"location":"1%20Physics/2%20Gravity/Problem_2/#problem-2","text":"","title":"Problem 2"},{"location":"1%20Physics/2%20Gravity/Problem_3/","text":"Problem 3","title":"Problem 3"},{"location":"1%20Physics/2%20Gravity/Problem_3/#problem-3","text":"","title":"Problem 3"},{"location":"1%20Physics/3%20Waves/Problem_1/","text":"Problem 1","title":"Problem 1"},{"location":"1%20Physics/3%20Waves/Problem_1/#problem-1","text":"","title":"Problem 1"},{"location":"1%20Physics/4%20Electromagnetism/Problem_1/","text":"Problem 1","title":"Problem 1"},{"location":"1%20Physics/4%20Electromagnetism/Problem_1/#problem-1","text":"","title":"Problem 1"},{"location":"1%20Physics/5%20Circuits/Problem_1/","text":"Problem 1","title":"Problem 1"},{"location":"1%20Physics/5%20Circuits/Problem_1/#problem-1","text":"","title":"Problem 1"},{"location":"1%20Physics/6%20Statistics/Problem_1/","text":"Problem 1","title":"Problem 1"},{"location":"1%20Physics/6%20Statistics/Problem_1/#problem-1","text":"","title":"Problem 1"},{"location":"1%20Physics/6%20Statistics/Problem_2/","text":"Problem 2","title":"Problem 2"},{"location":"1%20Physics/6%20Statistics/Problem_2/#problem-2","text":"","title":"Problem 2"},{"location":"1%20Physics/7%20Measurements/Problem_1/","text":"Problem 1","title":"Problem 1"},{"location":"1%20Physics/7%20Measurements/Problem_1/#problem-1","text":"","title":"Problem 1"},{"location":"2%20Mathematics/1%20Linear_algebra/","text":"Linear Algebra","title":"Linear Algebra"},{"location":"2%20Mathematics/1%20Linear_algebra/#linear-algebra","text":"","title":"Linear Algebra"},{"location":"2%20Mathematics/2%20Analytic_geometry/","text":"Analytic geometry","title":"Analytic geometry"},{"location":"2%20Mathematics/2%20Analytic_geometry/#analytic-geometry","text":"","title":"Analytic geometry"},{"location":"2%20Mathematics/3%20Calculus/","text":"Calculus","title":"Calculus"},{"location":"2%20Mathematics/3%20Calculus/#calculus","text":"","title":"Calculus"},{"location":"3%20Discret_Mathematics/1%20Set%20Theory%20and%20.../_02%20Set_Theory/","text":"Set Theory","title":"Set Theory"},{"location":"3%20Discret_Mathematics/1%20Set%20Theory%20and%20.../_02%20Set_Theory/#set-theory","text":"","title":"Set Theory"},{"location":"3%20Discret_Mathematics/1%20Set%20Theory%20and%20.../_03%20Relations/","text":"Relations","title":"Relations"},{"location":"3%20Discret_Mathematics/1%20Set%20Theory%20and%20.../_03%20Relations/#relations","text":"","title":"Relations"},{"location":"3%20Discret_Mathematics/1%20Set%20Theory%20and%20.../_04%20Functions/","text":"Functions","title":"Functions"},{"location":"3%20Discret_Mathematics/1%20Set%20Theory%20and%20.../_04%20Functions/#functions","text":"","title":"Functions"},{"location":"3%20Discret_Mathematics/2%20Number%20Theory%20and%20.../_05%20Combinatorics/","text":"Combinatorics","title":"Combinatorics"},{"location":"3%20Discret_Mathematics/2%20Number%20Theory%20and%20.../_05%20Combinatorics/#combinatorics","text":"","title":"Combinatorics"},{"location":"3%20Discret_Mathematics/2%20Number%20Theory%20and%20.../_08%20Number_Theory/","text":"Number Theory","title":"Number Theory"},{"location":"3%20Discret_Mathematics/2%20Number%20Theory%20and%20.../_08%20Number_Theory/#number-theory","text":"","title":"Number Theory"},{"location":"3%20Discret_Mathematics/3%20Recurrence%20and%20.../_06%20Sequences_and_Series/","text":"Sequences and Series","title":"Sequences and Series"},{"location":"3%20Discret_Mathematics/3%20Recurrence%20and%20.../_06%20Sequences_and_Series/#sequences-and-series","text":"","title":"Sequences and Series"},{"location":"3%20Discret_Mathematics/3%20Recurrence%20and%20.../_07%20Induction/","text":"Induction","title":"Induction"},{"location":"3%20Discret_Mathematics/3%20Recurrence%20and%20.../_07%20Induction/#induction","text":"","title":"Induction"},{"location":"3%20Discret_Mathematics/3%20Recurrence%20and%20.../_09%20Recurrence/","text":"Recurrence","title":"Recurrence"},{"location":"3%20Discret_Mathematics/3%20Recurrence%20and%20.../_09%20Recurrence/#recurrence","text":"","title":"Recurrence"},{"location":"3%20Discret_Mathematics/4%20Graph%20Theory%20and%20.../_10%20Graph_Theory/","text":"Graph Theory","title":"Graph Theory"},{"location":"3%20Discret_Mathematics/4%20Graph%20Theory%20and%20.../_10%20Graph_Theory/#graph-theory","text":"","title":"Graph Theory"},{"location":"3%20Discret_Mathematics/5%20Logic/_01%20Logic/","text":"Logic","title":"Logic"},{"location":"3%20Discret_Mathematics/5%20Logic/_01%20Logic/#logic","text":"","title":"Logic"}]}